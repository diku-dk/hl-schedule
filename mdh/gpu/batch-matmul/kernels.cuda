extern "C" __global__
void batch_matmul(float const * const __restrict__ a_buf_raw, float const * const __restrict__ b_buf_raw, float * const __restrict__ int_res_c_raw) {
    size_t l_cb_offset_l_1, l_cb_offset_l_2, l_cb_offset_l_3, l_cb_offset_r_1, p_cb_offset_l_1, p_cb_offset_l_2, p_cb_offset_l_3, p_cb_offset_r_1;

    const size_t i_wg_l_1 = blockIdx.x;
    const size_t i_wi_l_1 = 0;
    const size_t i_wg_l_2 = 0;
    const size_t i_wi_l_2 = 0;
    const size_t i_wg_l_3 = blockIdx.y;
    const size_t i_wi_l_3 = threadIdx.y;
    const size_t i_wg_r_1 = 0;
    const size_t i_wi_r_1 = 0;

    float const (*a_buf)[10][64] = reinterpret_cast<float const (*)[10][64]>(a_buf_raw);
    __shared__ float cb_l_a[(32)][(5)][(1)];
    float cb_p_a[(32)][(1)][(1)];
    float const (*b_buf)[64][500] = reinterpret_cast<float const (*)[64][500]>(b_buf_raw);
    float (*int_res_c)[(((10 - 1)) - (0) + 1)][(((500 - 1)) - (0) + 1)] = reinterpret_cast<float (*)[(((10 - 1)) - (0) + 1)][(((500 - 1)) - (0) + 1)]>(int_res_c_raw);
    float res_p_c[1][((5 / 1) / (1)) + (((1 * (5 / 1)) % (1 * (1)) / 1) > 0) + (((1 * (5 / 1)) % (1 * (1)) % 1) > 0)][1][((125 / 125) / (1)) + (((125 * (125 / 125)) % (125 * (1)) / 125) > 0) + (((125 * (125 / 125)) % (125 * (1)) % 125) > 0)][1][((1 / 1) / (1)) + (((1 * (1 / 1)) % (1 * (1)) / 1) > 0) + (((1 * (1 / 1)) % (1 * (1)) % 1) > 0)][1];

    l_cb_offset_l_1 = i_wg_l_1 * 1;
    for (size_t l_step_l_1 = 0; l_step_l_1 < ((16 / (16 * 1)) / (1 / 1)); ++l_step_l_1) {
        l_cb_offset_l_2 = i_wg_l_2 * 1;
        for (size_t l_step_l_2 = 0; l_step_l_2 < ((10 / (1 * 1)) / (5 / 1)); ++l_step_l_2) {
            l_cb_offset_l_3 = i_wg_l_3 * 125;
            for (size_t l_step_l_3 = 0; l_step_l_3 < ((500 / (4 * 125)) / (125 / 125)); ++l_step_l_3) {
                l_cb_offset_r_1 = i_wg_r_1 * 1;
                size_t l_step_r_1 = 0;
                {
                    {
                        for (size_t step = 0; step < (((((1 / 1) / (1)) * (1) + ((1 * (1 / 1)) % (1 * (1)) / 1)) * 1 + ((1 * (1 / 1)) % (1 * (1)) % 1))) * (((((5 / 1) / (1)) * (1) + ((1 * (5 / 1)) % (1 * (1)) / 1)) * 1 + ((1 * (5 / 1)) % (1 * (1)) % 1))) * (((((32 / 1) / (32)) * (32) + ((1 * (32 / 1)) % (1 * (32)) / 1)) * 1 + ((1 * (32 / 1)) % (1 * (32)) % 1))) / (1 * 1 * 125 * 1); ++step) {
                            const size_t flat_index = (((((threadIdx.z % (1))) * (1) + ((threadIdx.z / (1)))) * (125) + (threadIdx.y)) * (1) + (threadIdx.x)) + step * (1 * 1 * 125 * 1);
                            const size_t l_dim_0_index_l_1 = flat_index / ((((((5 / 1) / (1)) * (1) + ((1 * (5 / 1)) % (1 * (1)) / 1)) * 1 + ((1 * (5 / 1)) % (1 * (1)) % 1))) * (((((32 / 1) / (32)) * (32) + ((1 * (32 / 1)) % (1 * (32)) / 1)) * 1 + ((1 * (32 / 1)) % (1 * (32)) % 1))));
                            const size_t l_dim_1_index_l_2 = (flat_index / ((((((32 / 1) / (32)) * (32) + ((1 * (32 / 1)) % (1 * (32)) / 1)) * 1 + ((1 * (32 / 1)) % (1 * (32)) % 1))))) % (((((5 / 1) / (1)) * (1) + ((1 * (5 / 1)) % (1 * (1)) / 1)) * 1 + ((1 * (5 / 1)) % (1 * (1)) % 1)));
                            const size_t l_dim_2_index_r_1 = flat_index % (((((32 / 1) / (32)) * (32) + ((1 * (32 / 1)) % (1 * (32)) / 1)) * 1 + ((1 * (32 / 1)) % (1 * (32)) % 1)));
                            cb_l_a[((l_dim_2_index_r_1))][((l_dim_1_index_l_2))][((l_dim_0_index_l_1))] = a_buf[((l_step_l_1 * (1 / 1) + (l_dim_0_index_l_1) / 1) * (16 * 1) + i_wg_l_1 * 1 + ((l_dim_0_index_l_1) % 1))][((l_step_l_2 * (5 / 1) + (l_dim_1_index_l_2) / 1) * (1 * 1) + i_wg_l_2 * 1 + ((l_dim_1_index_l_2) % 1))][((l_step_r_1 * (32 / 1) + (l_dim_2_index_r_1) / 1) * (1 * 1) + i_wg_r_1 * 1 + ((l_dim_2_index_r_1) % 1))];
                        }
                        if ((((((threadIdx.z % (1))) * (1) + ((threadIdx.z / (1)))) * (125) + (threadIdx.y)) * (1) + (threadIdx.x)) < (((((1 / 1) / (1)) * (1) + ((1 * (1 / 1)) % (1 * (1)) / 1)) * 1 + ((1 * (1 / 1)) % (1 * (1)) % 1))) * (((((5 / 1) / (1)) * (1) + ((1 * (5 / 1)) % (1 * (1)) / 1)) * 1 + ((1 * (5 / 1)) % (1 * (1)) % 1))) * (((((32 / 1) / (32)) * (32) + ((1 * (32 / 1)) % (1 * (32)) / 1)) * 1 + ((1 * (32 / 1)) % (1 * (32)) % 1))) % (1 * 1 * 125 * 1)) {
                            const size_t flat_index = (((((threadIdx.z % (1))) * (1) + ((threadIdx.z / (1)))) * (125) + (threadIdx.y)) * (1) + (threadIdx.x)) + ((((((1 / 1) / (1)) * (1) + ((1 * (1 / 1)) % (1 * (1)) / 1)) * 1 + ((1 * (1 / 1)) % (1 * (1)) % 1))) * (((((5 / 1) / (1)) * (1) + ((1 * (5 / 1)) % (1 * (1)) / 1)) * 1 + ((1 * (5 / 1)) % (1 * (1)) % 1))) * (((((32 / 1) / (32)) * (32) + ((1 * (32 / 1)) % (1 * (32)) / 1)) * 1 + ((1 * (32 / 1)) % (1 * (32)) % 1))) / (1 * 1 * 125 * 1)) * (1 * 1 * 125 * 1);
                            const size_t l_dim_0_index_l_1 = flat_index / ((((((5 / 1) / (1)) * (1) + ((1 * (5 / 1)) % (1 * (1)) / 1)) * 1 + ((1 * (5 / 1)) % (1 * (1)) % 1))) * (((((32 / 1) / (32)) * (32) + ((1 * (32 / 1)) % (1 * (32)) / 1)) * 1 + ((1 * (32 / 1)) % (1 * (32)) % 1))));
                            const size_t l_dim_1_index_l_2 = (flat_index / ((((((32 / 1) / (32)) * (32) + ((1 * (32 / 1)) % (1 * (32)) / 1)) * 1 + ((1 * (32 / 1)) % (1 * (32)) % 1))))) % (((((5 / 1) / (1)) * (1) + ((1 * (5 / 1)) % (1 * (1)) / 1)) * 1 + ((1 * (5 / 1)) % (1 * (1)) % 1)));
                            const size_t l_dim_2_index_r_1 = flat_index % (((((32 / 1) / (32)) * (32) + ((1 * (32 / 1)) % (1 * (32)) / 1)) * 1 + ((1 * (32 / 1)) % (1 * (32)) % 1)));
                            cb_l_a[((l_dim_2_index_r_1))][((l_dim_1_index_l_2))][((l_dim_0_index_l_1))] = a_buf[((l_step_l_1 * (1 / 1) + (l_dim_0_index_l_1) / 1) * (16 * 1) + i_wg_l_1 * 1 + ((l_dim_0_index_l_1) % 1))][((l_step_l_2 * (5 / 1) + (l_dim_1_index_l_2) / 1) * (1 * 1) + i_wg_l_2 * 1 + ((l_dim_1_index_l_2) % 1))][((l_step_r_1 * (32 / 1) + (l_dim_2_index_r_1) / 1) * (1 * 1) + i_wg_r_1 * 1 + ((l_dim_2_index_r_1) % 1))];
                        }
                    }
                }
                __syncthreads();
                p_cb_offset_l_1 = i_wi_l_1 * 1;
                for (size_t p_step_l_1 = 0; p_step_l_1 < ((1 / 1) / (1)); ++p_step_l_1) {
                    p_cb_offset_l_2 = i_wi_l_2 * 1;
                    for (size_t p_step_l_2 = 0; p_step_l_2 < ((5 / 1) / (1)); ++p_step_l_2) {
                        {
                            size_t p_step_r_1 = 0;
                            {
                                for (size_t step = 0; step < ((1)) * ((1)) * ((32)) / (1); ++step) {
                                    const size_t flat_index = (0) + step * (1);
                                    const size_t p_dim_2_index_r_1 = flat_index / (((1)) * ((1)));
                                    const size_t p_dim_1_index_l_2 = (flat_index / (((1)))) % ((1));
                                    const size_t p_dim_0_index_l_1 = flat_index % ((1));
                                    cb_p_a[((p_dim_2_index_r_1))][((p_dim_1_index_l_2))][((p_dim_0_index_l_1))] = cb_l_a[((((p_step_r_1 * (32) + (p_dim_2_index_r_1) / 1) * 1 + i_wi_r_1 * 1 + ((p_dim_2_index_r_1) % 1))))][((((p_step_l_2 * (1) + (p_dim_1_index_l_2) / 1) * 1 + i_wi_l_2 * 1 + ((p_dim_1_index_l_2) % 1))))][((((p_step_l_1 * (1) + (p_dim_0_index_l_1) / 1) * 1 + i_wi_l_1 * 1 + ((p_dim_0_index_l_1) % 1))))];
                                }
                            }
                        }
                        p_cb_offset_l_3 = i_wi_l_3 * 1;
                        for (size_t p_step_l_3 = 0; p_step_l_3 < ((125 / 125) / (1)); ++p_step_l_3) {
                            p_cb_offset_r_1 = i_wi_r_1 * 1;
                            size_t p_step_r_1 = 0;
                            #pragma unroll
                            for (size_t p_iteration_l_1 = 0; p_iteration_l_1 < (1); ++p_iteration_l_1) {
                                #pragma unroll
                                for (size_t p_iteration_l_2 = 0; p_iteration_l_2 < (1); ++p_iteration_l_2) {
                                    #pragma unroll
                                    for (size_t p_iteration_l_3 = 0; p_iteration_l_3 < (1); ++p_iteration_l_3) {
                                        size_t p_iteration_r_1 = 0;
                                        res_p_c[(0)][p_step_l_2][(p_iteration_l_2)][p_step_l_3][(p_iteration_l_3)][p_step_l_1][(p_iteration_l_1)] = cb_p_a[(((p_iteration_r_1)))][(((p_iteration_l_2)))][(((p_iteration_l_1)))] * b_buf[(l_cb_offset_l_1 + (((p_cb_offset_l_1 + (((p_iteration_l_1)) / 1) * 1 + 0)) / 1) * (16 * 1) + i_wi_l_1)][(l_cb_offset_r_1 + (((p_cb_offset_r_1 + (((p_iteration_r_1)) / 1) * 1 + 0)) / 1) * (1 * 1) + i_wi_r_1)][(l_cb_offset_l_3 + (((p_cb_offset_l_3 + (((p_iteration_l_3)) / 1) * 125 + 0)) / 125) * (4 * 125) + i_wi_l_3)];
                                        #pragma unroll
                                        for (p_iteration_r_1 = 1; p_iteration_r_1 < (32); ++p_iteration_r_1) {
                                            res_p_c[(0)][p_step_l_2][(p_iteration_l_2)][p_step_l_3][(p_iteration_l_3)][p_step_l_1][(p_iteration_l_1)] += cb_p_a[(((p_iteration_r_1)))][(((p_iteration_l_2)))][(((p_iteration_l_1)))] * b_buf[(l_cb_offset_l_1 + (((p_cb_offset_l_1 + (((p_iteration_l_1)) / 1) * 1 + 0)) / 1) * (16 * 1) + i_wi_l_1)][(l_cb_offset_r_1 + (((p_cb_offset_r_1 + (((p_iteration_r_1)) / 1) * 1 + 0)) / 1) * (1 * 1) + i_wi_r_1)][(l_cb_offset_l_3 + (((p_cb_offset_l_3 + (((p_iteration_l_3)) / 1) * 125 + 0)) / 125) * (4 * 125) + i_wi_l_3)];
                                        }
                                    }
                                }
                            }
                            p_cb_offset_r_1 += 1 * (32);
                            p_cb_offset_l_3 += 125 * (1);
                        }
                        p_cb_offset_l_2 += 1 * (1);
                    }
                    p_cb_offset_l_1 += 1 * (1);
                }
                __syncthreads();
                l_cb_offset_r_1 += (1 * 1) * (32 / 1);
                for (l_step_r_1 = 1; l_step_r_1 < ((64 / (1 * 1)) / (32 / 1)); ++l_step_r_1) {
                    {
                        {
                            for (size_t step = 0; step < (((((1 / 1) / (1)) * (1) + ((1 * (1 / 1)) % (1 * (1)) / 1)) * 1 + ((1 * (1 / 1)) % (1 * (1)) % 1))) * (((((5 / 1) / (1)) * (1) + ((1 * (5 / 1)) % (1 * (1)) / 1)) * 1 + ((1 * (5 / 1)) % (1 * (1)) % 1))) * (((((32 / 1) / (32)) * (32) + ((1 * (32 / 1)) % (1 * (32)) / 1)) * 1 + ((1 * (32 / 1)) % (1 * (32)) % 1))) / (1 * 1 * 125 * 1); ++step) {
                                const size_t flat_index = (((((threadIdx.z % (1))) * (1) + ((threadIdx.z / (1)))) * (125) + (threadIdx.y)) * (1) + (threadIdx.x)) + step * (1 * 1 * 125 * 1);
                                const size_t l_dim_0_index_l_1 = flat_index / ((((((5 / 1) / (1)) * (1) + ((1 * (5 / 1)) % (1 * (1)) / 1)) * 1 + ((1 * (5 / 1)) % (1 * (1)) % 1))) * (((((32 / 1) / (32)) * (32) + ((1 * (32 / 1)) % (1 * (32)) / 1)) * 1 + ((1 * (32 / 1)) % (1 * (32)) % 1))));
                                const size_t l_dim_1_index_l_2 = (flat_index / ((((((32 / 1) / (32)) * (32) + ((1 * (32 / 1)) % (1 * (32)) / 1)) * 1 + ((1 * (32 / 1)) % (1 * (32)) % 1))))) % (((((5 / 1) / (1)) * (1) + ((1 * (5 / 1)) % (1 * (1)) / 1)) * 1 + ((1 * (5 / 1)) % (1 * (1)) % 1)));
                                const size_t l_dim_2_index_r_1 = flat_index % (((((32 / 1) / (32)) * (32) + ((1 * (32 / 1)) % (1 * (32)) / 1)) * 1 + ((1 * (32 / 1)) % (1 * (32)) % 1)));
                                cb_l_a[((l_dim_2_index_r_1))][((l_dim_1_index_l_2))][((l_dim_0_index_l_1))] = a_buf[((l_step_l_1 * (1 / 1) + (l_dim_0_index_l_1) / 1) * (16 * 1) + i_wg_l_1 * 1 + ((l_dim_0_index_l_1) % 1))][((l_step_l_2 * (5 / 1) + (l_dim_1_index_l_2) / 1) * (1 * 1) + i_wg_l_2 * 1 + ((l_dim_1_index_l_2) % 1))][((l_step_r_1 * (32 / 1) + (l_dim_2_index_r_1) / 1) * (1 * 1) + i_wg_r_1 * 1 + ((l_dim_2_index_r_1) % 1))];
                            }
                            if ((((((threadIdx.z % (1))) * (1) + ((threadIdx.z / (1)))) * (125) + (threadIdx.y)) * (1) + (threadIdx.x)) < (((((1 / 1) / (1)) * (1) + ((1 * (1 / 1)) % (1 * (1)) / 1)) * 1 + ((1 * (1 / 1)) % (1 * (1)) % 1))) * (((((5 / 1) / (1)) * (1) + ((1 * (5 / 1)) % (1 * (1)) / 1)) * 1 + ((1 * (5 / 1)) % (1 * (1)) % 1))) * (((((32 / 1) / (32)) * (32) + ((1 * (32 / 1)) % (1 * (32)) / 1)) * 1 + ((1 * (32 / 1)) % (1 * (32)) % 1))) % (1 * 1 * 125 * 1)) {
                                const size_t flat_index = (((((threadIdx.z % (1))) * (1) + ((threadIdx.z / (1)))) * (125) + (threadIdx.y)) * (1) + (threadIdx.x)) + ((((((1 / 1) / (1)) * (1) + ((1 * (1 / 1)) % (1 * (1)) / 1)) * 1 + ((1 * (1 / 1)) % (1 * (1)) % 1))) * (((((5 / 1) / (1)) * (1) + ((1 * (5 / 1)) % (1 * (1)) / 1)) * 1 + ((1 * (5 / 1)) % (1 * (1)) % 1))) * (((((32 / 1) / (32)) * (32) + ((1 * (32 / 1)) % (1 * (32)) / 1)) * 1 + ((1 * (32 / 1)) % (1 * (32)) % 1))) / (1 * 1 * 125 * 1)) * (1 * 1 * 125 * 1);
                                const size_t l_dim_0_index_l_1 = flat_index / ((((((5 / 1) / (1)) * (1) + ((1 * (5 / 1)) % (1 * (1)) / 1)) * 1 + ((1 * (5 / 1)) % (1 * (1)) % 1))) * (((((32 / 1) / (32)) * (32) + ((1 * (32 / 1)) % (1 * (32)) / 1)) * 1 + ((1 * (32 / 1)) % (1 * (32)) % 1))));
                                const size_t l_dim_1_index_l_2 = (flat_index / ((((((32 / 1) / (32)) * (32) + ((1 * (32 / 1)) % (1 * (32)) / 1)) * 1 + ((1 * (32 / 1)) % (1 * (32)) % 1))))) % (((((5 / 1) / (1)) * (1) + ((1 * (5 / 1)) % (1 * (1)) / 1)) * 1 + ((1 * (5 / 1)) % (1 * (1)) % 1)));
                                const size_t l_dim_2_index_r_1 = flat_index % (((((32 / 1) / (32)) * (32) + ((1 * (32 / 1)) % (1 * (32)) / 1)) * 1 + ((1 * (32 / 1)) % (1 * (32)) % 1)));
                                cb_l_a[((l_dim_2_index_r_1))][((l_dim_1_index_l_2))][((l_dim_0_index_l_1))] = a_buf[((l_step_l_1 * (1 / 1) + (l_dim_0_index_l_1) / 1) * (16 * 1) + i_wg_l_1 * 1 + ((l_dim_0_index_l_1) % 1))][((l_step_l_2 * (5 / 1) + (l_dim_1_index_l_2) / 1) * (1 * 1) + i_wg_l_2 * 1 + ((l_dim_1_index_l_2) % 1))][((l_step_r_1 * (32 / 1) + (l_dim_2_index_r_1) / 1) * (1 * 1) + i_wg_r_1 * 1 + ((l_dim_2_index_r_1) % 1))];
                            }
                        }
                    }
                    __syncthreads();
                    p_cb_offset_l_1 = i_wi_l_1 * 1;
                    for (size_t p_step_l_1 = 0; p_step_l_1 < ((1 / 1) / (1)); ++p_step_l_1) {
                        p_cb_offset_l_2 = i_wi_l_2 * 1;
                        for (size_t p_step_l_2 = 0; p_step_l_2 < ((5 / 1) / (1)); ++p_step_l_2) {
                            {
                                size_t p_step_r_1 = 0;
                                {
                                    for (size_t step = 0; step < ((1)) * ((1)) * ((32)) / (1); ++step) {
                                        const size_t flat_index = (0) + step * (1);
                                        const size_t p_dim_2_index_r_1 = flat_index / (((1)) * ((1)));
                                        const size_t p_dim_1_index_l_2 = (flat_index / (((1)))) % ((1));
                                        const size_t p_dim_0_index_l_1 = flat_index % ((1));
                                        cb_p_a[((p_dim_2_index_r_1))][((p_dim_1_index_l_2))][((p_dim_0_index_l_1))] = cb_l_a[((((p_step_r_1 * (32) + (p_dim_2_index_r_1) / 1) * 1 + i_wi_r_1 * 1 + ((p_dim_2_index_r_1) % 1))))][((((p_step_l_2 * (1) + (p_dim_1_index_l_2) / 1) * 1 + i_wi_l_2 * 1 + ((p_dim_1_index_l_2) % 1))))][((((p_step_l_1 * (1) + (p_dim_0_index_l_1) / 1) * 1 + i_wi_l_1 * 1 + ((p_dim_0_index_l_1) % 1))))];
                                    }
                                }
                            }
                            p_cb_offset_l_3 = i_wi_l_3 * 1;
                            for (size_t p_step_l_3 = 0; p_step_l_3 < ((125 / 125) / (1)); ++p_step_l_3) {
                                p_cb_offset_r_1 = i_wi_r_1 * 1;
                                size_t p_step_r_1 = 0;
                                #pragma unroll
                                for (size_t p_iteration_l_1 = 0; p_iteration_l_1 < (1); ++p_iteration_l_1) {
                                    for (size_t p_iteration_l_2 = 0; p_iteration_l_2 < (1); ++p_iteration_l_2) {
                                        for (size_t p_iteration_l_3 = 0; p_iteration_l_3 < (1); ++p_iteration_l_3) {
                                            for (size_t p_iteration_r_1 = 0; p_iteration_r_1 < (32); ++p_iteration_r_1) {
                                                res_p_c[(0)][p_step_l_2][(p_iteration_l_2)][p_step_l_3][(p_iteration_l_3)][p_step_l_1][(p_iteration_l_1)] += cb_p_a[(((p_iteration_r_1)))][(((p_iteration_l_2)))][(((p_iteration_l_1)))] * b_buf[(l_cb_offset_l_1 + (((p_cb_offset_l_1 + (((p_iteration_l_1)) / 1) * 1 + 0)) / 1) * (16 * 1) + i_wi_l_1)][(l_cb_offset_r_1 + (((p_cb_offset_r_1 + (((p_iteration_r_1)) / 1) * 1 + 0)) / 1) * (1 * 1) + i_wi_r_1)][(l_cb_offset_l_3 + (((p_cb_offset_l_3 + (((p_iteration_l_3)) / 1) * 125 + 0)) / 125) * (4 * 125) + i_wi_l_3)];
                                            }
                                        }
                                    }
                                }
                                p_cb_offset_r_1 += 1 * (32);
                                p_cb_offset_l_3 += 125 * (1);
                            }
                            p_cb_offset_l_2 += 1 * (1);
                        }
                        p_cb_offset_l_1 += 1 * (1);
                    }
                    __syncthreads();
                    l_cb_offset_r_1 += (1 * 1) * (32 / 1);
                }
                {
                    {
                        p_cb_offset_l_1 = i_wi_l_1 * 1;
                        for (size_t p_step_l_1 = 0; p_step_l_1 < ((1 / 1) / (1)); ++p_step_l_1) {
                            p_cb_offset_l_2 = i_wi_l_2 * 1;
                            for (size_t p_step_l_2 = 0; p_step_l_2 < ((5 / 1) / (1)); ++p_step_l_2) {
                                p_cb_offset_l_3 = i_wi_l_3 * 1;
                                for (size_t p_step_l_3 = 0; p_step_l_3 < ((125 / 125) / (1)); ++p_step_l_3) {
                                    for (size_t p_iteration_l_1 = 0; p_iteration_l_1 < (1); ++p_iteration_l_1) {
                                        for (size_t p_iteration_l_2 = 0; p_iteration_l_2 < (1); ++p_iteration_l_2) {
                                            for (size_t p_iteration_l_3 = 0; p_iteration_l_3 < (1); ++p_iteration_l_3) {
                                                int_res_c[(l_cb_offset_l_1 + (((p_cb_offset_l_1 + (((p_iteration_l_1)) / 1) * 1 + 0)) / 1) * (16 * 1) + i_wi_l_1)][(l_cb_offset_l_2 + (((p_cb_offset_l_2 + (((p_iteration_l_2)) / 1) * 1 + 0)) / 1) * (1 * 1) + i_wi_l_2)][(l_cb_offset_l_3 + (((p_cb_offset_l_3 + (((p_iteration_l_3)) / 1) * 125 + 0)) / 125) * (4 * 125) + i_wi_l_3)] = res_p_c[(0)][p_step_l_2][(p_iteration_l_2)][p_step_l_3][(p_iteration_l_3)][p_step_l_1][(p_iteration_l_1)];
                                            }
                                        }
                                    }
                                    p_cb_offset_l_3 += 125 * (1);
                                }
                                p_cb_offset_l_2 += 1 * (1);
                            }
                            p_cb_offset_l_1 += 1 * (1);
                        }
                    }
                }
                l_cb_offset_l_3 += (4 * 125) * (125 / 125);
            }
            __syncthreads();
            l_cb_offset_l_2 += (1 * 1) * (5 / 1);
        }
        l_cb_offset_l_1 += (16 * 1) * (1 / 1);
    }
}
